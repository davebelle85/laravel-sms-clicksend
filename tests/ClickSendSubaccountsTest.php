<?php

namespace JordanHavard\ClickSend\Test;

use Illuminate\Support\Facades\Http;
use JordanHavard\ClickSend\ClickSendClient;
use JordanHavard\ClickSend\ClickSendSubaccount;

class ClickSendSubaccountsTest extends TestCase
{
    private $client = null;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->client = new ClickSendClient('username', 'apikey');
    }

    public function test_we_can_create_a_subaccount()
    {
        Http::fake([
            '*' => Http::response([
                'http_code' => 200,
                'response_code' => 'SUCCESS',
                'response_msg' => 'New account has been created.',
                'data' => (object) [
                    'subaccount_id' => 1234,

                ],
            ]),
        ]);

        // create properties for new subaccount
        $properties = new ClickSendSubaccount();
        $properties->email = 'email@example.com';
        $properties->api_username = 'api_username';
        $properties->password = 'password';
        $properties->first_name = 'FirstName';
        $properties->last_name = 'LastName';
        $properties->phone_number = '+614xxxxxxxx';

        // send create request and run assertions
        $response = $this->client->getSubaccounts()->create($properties);

        $this->assertSame($response->http_code, 200);
        $this->assertSame($response->response_msg, 'New account has been created.');
        $subaccountId = $response->data->subaccount_id;
        $this->assertNotSame($subaccountId, '');
        $this->assertGreaterThan(0, $subaccountId);
    }

    public function test_we_can_list_all_subaccounts()
    {

        Http::fake([
            '*' => Http::response([
                'http_code' => 200,
                'response_code' => 'SUCCESS',
                'response_msg' => 'SUCCESS',
                'data' => (object) [
                    'data' => [
                        [
                            'first_name' => 'subaccount',
                        ],
                    ],

                ],
            ]),
        ]);

        // list all subaccounts
        $response = $this->client->getSubaccounts()->index();
        $this->assertSame($response->http_code, 200);
        $this->assertSame($response->response_msg, 'SUCCESS');
        $this->assertGreaterThan(0, count($response->data->data));

    }

    public function test_we_can_view_a_subaccount()
    {
        Http::fake([
            '*' => Http::response([
                'http_code' => 200,
                'response_code' => 'SUCCESS',
                'response_msg' => 'Here is your subaccount.',
                'data' => (object) [
                    'subaccount_id' => 1234,

                ],
            ]),
        ]);
        // view an individual subaccount
        $subaccountId = 1234;
        $response = $this->client->getSubaccounts()->view($subaccountId);
        $this->assertSame($response->http_code, 200);
        $this->assertSame($response->response_msg, 'Here is your subaccount.');
        $this->assertSame(1234, $subaccountId);
    }

    public function test_we_can_update_a_subaccount()
    {
        Http::fake([
            '*' => Http::response([
                'http_code' => 200,
                'response_code' => 'SUCCESS',
                'response_msg' => 'Subaccount has been updated.',
                'data' => (object) [
                    'subaccount_id' => 1234,

                ],
            ]),
        ]);
        $subaccountId = 1234;
        // update the subaccount we created earlier
        $updatedProperties = new ClickSendSubaccount();
        $updatedProperties->email = 'updated@example.com'; // must be unique in clicksend
        $updatedProperties->api_username = 'updated_api_username'; // must be unique in clicksend
        $updatedProperties->password = 'updated_password';
        $updatedProperties->first_name = 'UpdatedFirstName';
        $updatedProperties->last_name = 'UpdatedLastName';
        $updatedProperties->phone_number = '+61xxxxxxxxx';

        $response = $this->client->getSubaccounts()->update($subaccountId, $updatedProperties);
        $this->assertSame($response->http_code, 200);
        $this->assertSame($response->response_msg, 'Subaccount has been updated.');

    }

    public function test_we_can_regenerate_a_new_key_for_a_subaccount()
    {

        $subaccountId = 1234;
        Http::fake([
            '*' => Http::response([
                'http_code' => 200,
                'response_code' => 'SUCCESS',
                'response_msg' => 'Your API Key has been regenerated.',
                'data' => (object) [
                    'subaccount_id' => 1234,
                    'api_key' => 'aaaaa',

                ],
            ]),
        ]);
        // regenerate a new key
        $response = $this->client->getSubaccounts()->generate_new_api_key($subaccountId);
        $this->assertSame($response->http_code, 200);
        $this->assertSame($response->response_msg, 'Your API Key has been regenerated.');
        $this->assertNotNull($response->data->api_key);

    }

    public function test_we_can_delete_a_subaccount()
    {

        $subaccountId = 1234;
        Http::fake([
            '*' => Http::response([
                'http_code' => 200,
                'response_code' => 'SUCCESS',
                'response_msg' => 'Subaccount has been deleted',
                'data' => (object) [
                    'subaccount_id' => 1234,

                ],
            ]),
        ]);
        // delete the account we created earlier
        $response = $this->client->getSubaccounts()->delete($subaccountId);

        $this->assertSame($response->http_code, 200);
        $this->assertSame($response->response_msg, 'Subaccount has been deleted');

    }
}
